plugins {
    id 'maven-publish'
    id 'signing'
}

if (project.ext.publish) {
    assert project.hasProperty('ossrhToken')
    assert project.hasProperty('ossrhTokenPassword')

    def journeyApiExtension = extensions.getByName('journeyApiExtension')
    javadoc {
        title = journeyApiExtension.apiName.get() + ' (v' + project.ext.apiVersion + ')'
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.links(
                'https://javadoc.io/doc/org.jetbrains/annotations/24.1.0'
        )
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    publishing {
        repositories {
            maven {
                name = "sonatype"
                url = project.ext.snapshot
                        ? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                        : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username findProperty("ossrhToken") as String
                    password findProperty("ossrhTokenPassword") as String
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId = 'net.whimxiqal.journey'
                artifactId = journeyApiExtension.artifactId.get()
                version = project.ext.apiVersion + (project.ext.snapshot ? '-SNAPSHOT' : '')
                from components.java
                artifact sourcesJar
                artifact javadocJar
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = journeyApiExtension.apiName.get()
                    description = journeyApiExtension.apiDescription.get()
                    url = 'https://github.com/whimxiqal/journey'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'whimxiqal'
                            name = 'whimxiqal'
                            url = 'https://whimxiqal.net'
                            email = 'whimxiqal@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/whimxiqal/journey.git'
                        developerConnection = 'scm:git:ssh://github.com:whimxiqal/journey.git'
                        url = 'https://github.com/whimxiqal/journey'
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/whimxiqal/journey/issues'
                    }
                }
            }
        }

        signing {
            useGpgCmd()
            sign configurations.archives
            sign publishing.publications.mavenJava
            required = true
        }
    }
}
