"""
A script that automatically 
  - sorts all keys in all messages file
  - adds any keys present in default messages file into non-default messages file if not present
  - generates the Messages.java file
"""

import os
import re

MESSAGES_PROPERTIES_FOLDER = os.path.join(os.path.dirname(__file__), '..', 'common', 'src', 'main', 'resources')
MESSAGES_PROPERTIES_FILE_NAME = 'messages_en.properties'

MESSAGES_JAVA_FILE_PATH = os.path.join(os.path.dirname(__file__), '..', 'common', 'src', 'main', 'java', 'net', 'whimxiqal', 'journey', 'message', 'Messages.java')
MESSAGES_JAVA_FILE_HEADER = """

package net.whimxiqal.journey.message;

/**
 * Auto-generated by scripts/format-message-files.py
 */
public final class Messages {

"""

MESSAGES_JAVA_FILE_FOOTER = """
  private Messages() {
  }
}

"""
LICENSE_FILE_PATH = os.path.join(os.path.dirname(__file__), '..', 'LICENSE.txt')


with open(os.path.join(MESSAGES_PROPERTIES_FOLDER, MESSAGES_PROPERTIES_FILE_NAME), 'r', encoding='utf-8') as messages_file:
    lines = messages_file.readlines()

lines.sort(key=lambda line: line.split('=')[0])
split_lines = [(line.rstrip('\n')).split('=') for line in lines if '=' in line]

# Update property files: sort by key and add any missing keys to other files
for file_name in os.listdir(MESSAGES_PROPERTIES_FOLDER):
    if not file_name.startswith('messages'):
        continue

    full_path = os.path.join(MESSAGES_PROPERTIES_FOLDER, file_name)
    if not os.path.isfile(full_path):
        continue

    with open(full_path, 'r', encoding='utf-8') as messages_file:
        lines = messages_file.readlines()

    message_keys = {(line.rstrip('\n')).split('=')[0] for line in lines if '=' in line}
    for tokens in split_lines:
        if tokens[0] not in message_keys:
            lines.append(tokens[0] + '=\n')
    
    lines.sort()

    with open(full_path, 'w', encoding='utf-8') as messages_file:
        messages_file.writelines(lines)



java_lines = []
for line in split_lines:
    param_count = len(re.findall(r'{[0-9]}', line[1]))
    java_variable_name = re.sub(r'^journey\.', '', line[0])
    java_variable_name = re.sub(r'[.-]', '_', java_variable_name)
    java_variable_name = java_variable_name.upper()
    java_lines.append(f'  public static final MessageTemplate_{param_count} {java_variable_name} = new MessageTemplate_{param_count}("{line[0]}");\n')

# Prepare license
with open(LICENSE_FILE_PATH, 'r', encoding='utf-8') as license_file:
    license_lines = [' * ' + line for line in license_file.readlines()]

license_lines.insert(0, '/*')
license_lines.append(' */')


with open(MESSAGES_JAVA_FILE_PATH, 'w', encoding='utf-8') as messages_java_file:
    messages_java_file.writelines(license_lines)
    messages_java_file.write(MESSAGES_JAVA_FILE_HEADER)
    messages_java_file.writelines(java_lines)
    messages_java_file.write(MESSAGES_JAVA_FILE_FOOTER)
